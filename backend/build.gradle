plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.quizplatform'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

// 모든 하위 모듈에 공통으로 적용될 설정
subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group = 'com.quizplatform'
	version = '0.0.1-SNAPSHOT'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}

	repositories {
		mavenCentral()
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

		implementation 'org.springframework.kafka:spring-kafka'
		testImplementation 'org.springframework.kafka:spring-kafka-test'
	}

	test {
		useJUnitPlatform()
	}
}

// == 각 모듈별 의존성 정의 ==
project(':quiz') {
	dependencies {
		implementation project(':common')
		implementation project(':infra')
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
		annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
		annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	}
}

project(':battle') {
	dependencies {
		implementation project(':common')
		implementation project(':infra')
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-websocket'
	}
}

project(':user') {
	dependencies {
		implementation project(':common')
		implementation project(':infra')
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	}
}

project(':common') {
	dependencies {
		// common 모듈은 다른 도메인 모듈에 의존하지 않음
	}
}

project(':infra') {
	dependencies {
		implementation project(':common')

		implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
		implementation 'org.springframework.boot:spring-boot-starter-data-redis'
		implementation 'org.springframework.boot:spring-boot-starter-security'
		runtimeOnly 'org.postgresql:postgresql'
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

		implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	}
}

// == QueryDSL 설정 ==
def querydslGeneratedDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslGeneratedDir ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslGeneratedDir)
}

clean.doLast {
	delete(file(querydslGeneratedDir))
}