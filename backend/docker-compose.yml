version: '3.8'

services:
  # 설정 서버
  config-server:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - CONFIG_GIT_URI=file:///app/config-repo
    ports:
      - "8888:8888"
    command: java -jar /app/modules/config-server/build/libs/config-server-0.0.1-SNAPSHOT.jar
    networks:
      - quiz-network

  # API 게이트웨이 서비스
  api-gateway:
    build:
      context: .
      dockerfile: ./modules/api-gateway/Dockerfile
    container_name: quiz-api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - redis
      - kafka
      - eureka-server
      - config-server
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Eureka Server 서비스
  eureka-server:
    build:
      context: .
      dockerfile: ./modules/eureka-server/Dockerfile
    container_name: quiz-eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - config-server
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # 유저 서비스
  user-service:
    build:
      context: .
      dockerfile: ./modules/user/Dockerfile
    container_name: quiz-user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - postgres
      - eureka-server
      - kafka
      - config-server
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # 퀴즈 서비스
  quiz-service:
    build:
      context: .
      dockerfile: ./modules/quiz/Dockerfile
    container_name: quiz-quiz-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - postgres
      - eureka-server
      - elasticsearch
      - kafka
      - config-server
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # 배틀 서비스
  battle-service:
    build:
      context: .
      dockerfile: ./modules/battle/Dockerfile
    container_name: quiz-battle-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - postgres
      - redis
      - eureka-server
      - kafka
      - config-server
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # PostgreSQL 데이터베이스 서비스
  postgres:
    image: postgres:15-alpine
    container_name: quiz-postgres
    environment:
      POSTGRES_DB: quiz_platform
      POSTGRES_USER: quizuser
      POSTGRES_PASSWORD: quizpass
      # 타임존 설정 - 한국 시간 사용
      TZ: Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      # 데이터 영속성을 위한 볼륨 설정
      - postgres_data:/var/lib/postgresql/data
      # 초기화 스크립트 디렉토리 마운트
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      # 데이터베이스 헬스체크 설정
      test: ["CMD-SHELL", "pg_isready -U quizuser -d quiz_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quiz-network
    restart: unless-stopped

  # Redis 캐시 서비스
  redis:
    image: redis:7-alpine
    container_name: quiz-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quiz-network
    restart: unless-stopped

  # Elasticsearch 검색 엔진
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: quiz-elasticsearch
    environment:
      - node.name=quiz-es01
      - cluster.name=quiz-es-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - quiz-network
    restart: unless-stopped

  # Zookeeper 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: quiz-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - quiz-network
    restart: unless-stopped

  # Kafka 서비스
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: quiz-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - quiz-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  zookeeper_data:
  kafka_data:

networks:
  quiz-network:
    driver: bridge