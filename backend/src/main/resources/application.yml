spring:
  # ?? ???? ??
  profiles:
    active: local

  # ????? ??
  datasource:
    url: jdbc:postgresql://localhost:5432/quiz_db
    username: quizuser
    password: quizpass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      max-lifetime: 1200000

  # JPA ??
  jpa:
    hibernate:
      ddl-auto: update  # ??? ??? ??
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          time_zone: Asia/Seoul
        # ?? ?? ??
        jdbc.batch_size: 50
        order_inserts: true
        order_updates: true
        default_batch_fetch_size: 1000
    open-in-view: false  # OSIV ????



  # Redis ??
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
          max-wait: -1ms

  # Elasticsearch ??
  elasticsearch:
    uris: http://localhost:9200
    connection-timeout: 5s
    socket-timeout: 3s

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/api/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile

          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/api/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/api/oauth2/callback/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            client-name: Kakao
            scope:
              - profile_nickname
              - profile_image
              - account_email

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  # Kafka Configuration (Moved under existing spring block)
  kafka:
    producer:
      bootstrap-servers: localhost:9092 # 기본값, 환경별로 재정의 필요
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false # JSON 메시지에 타입 헤더 추가 여부 (필요에 따라 true로 변경)
    consumer:
      bootstrap-servers: localhost:9092 # 기본값, 환경별로 재정의 필요
      group-id: quizplatform-group # 기본 Consumer Group ID, 필요시 변경
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*" # 모든 패키지의 JSON 역직렬화 허용 (보안상 주의 필요, 특정 패키지 명시 권장)
        spring.json.use.type.headers: false # 타입 헤더 사용 여부
    # Kafka Listener 설정 (필요에 따라 추가)
    # listener:
    #   type: batch # 또는 single
    #   ack-mode: record # 또는 batch, manual 등

app:
  oauth2:
    authorized-redirect-uri: ${OAUTH2_AUTHORIZED_REDIRECT_URI:http://localhost:3000/api/oauth2/redirect}


# ?? ??
server:
  port: 8080
  servlet:
    context-path: /
  tomcat:
    max-threads: 200
    accept-count: 100
    connection-timeout: 5s

# ?? ??
logging:
  level:
    root: INFO
    com.quizplatform: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.cache: TRACE
    org.springframework.data.elasticsearch.client.WIRE: TRACE

# JWT ??
jwt:
  secret: ${JWT_SECRET:AbCdEfGhIjKlMnOpQrStUvWxYz1234567890AbCdEfGhIjKlMnOpQrStUvWxYz}  # ?? ?? ????? ????? ??
  access-token-validity: 3600000  # 1??
  refresh-token-validity: 1209600000  # 2?

# ?? ??
cache:
  quiz:
    ttl: 3600  # 1??
  user:
    ttl: 1800  # 30?

# ?????? ???? ??
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always


# application.yml에 추가할 설정
springdoc:
  swagger-ui:
    path: /swagger-ui.html  # Swagger UI 경로 설정
    groups-order: DESC
    operationsSorter: method
#    disable-swagger-default-url: true
  api-docs:
    path: /api-docs  # API 문서 JSON 경로
  show-actuator: false  # Actuator 엔드포인트 문서화 비활성화
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /api/**




